syntax = "proto3";

package chat;

service ChatService {
  rpc SendMessage (SendMessageRequest) returns (MessageResponse);
  rpc GetMessages (GetMessagesRequest) returns (MessagesResponse);
  rpc GetConversations (UserRequest) returns (ConversationsResponse);
  rpc CreateGroupChat (CreateGroupRequest) returns (GroupResponse);
  rpc AddUserToGroup (GroupUserRequest) returns (GroupResponse);
  rpc RemoveUserFromGroup (GroupUserRequest) returns (GroupResponse);
  rpc GetGroupMembers (GroupRequest) returns (GroupMembersResponse);
  rpc GetUserGroups (UserRequest) returns (GroupsResponse);
  rpc AskAI (AIRequest) returns (AIResponse);
  rpc UpdateTypingStatus (TypingStatusRequest) returns (TypingStatusResponse);
  rpc GetTypingUsers (ConversationRequest) returns (TypingUsersResponse);
  rpc UpdateUserStatus (UserStatusRequest) returns (UserStatusResponse);
  rpc GetUserStatus (UserRequest) returns (UserStatusResponse);
  rpc GetOnlineUsers (EmptyRequest) returns (OnlineUsersResponse);
  rpc SendAdminNotification (AdminNotificationRequest) returns (AdminNotificationResponse);

}

message SendMessageRequest {
  string sender_id = 1;
  string content = 2;
  string conversation_id = 3;
  string receiver_id = 4; // Optionnel pour les messages de groupe
}

message GetMessagesRequest {
  string conversation_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

message UserRequest {
  string user_id = 1;
}

message Message {
  string id = 1;
  string sender_id = 2;
  string sender_role = 3; // Rôle de l'expéditeur
  string sender_name = 4; // Nom de l'expéditeur
  string receiver_id = 5;
  string content = 6;
  string conversation_id = 7;
  bool is_read = 8;
  bool is_ai = 9;
  string created_at = 10;
}

message Conversation {
  string id = 1;
  repeated string participants = 2;
  repeated string participant_roles = 3; // Rôles des participants
  Message last_message = 4;
  bool is_group = 5;
  string group_name = 6; // Nom du groupe si c'est un groupe
  string created_at = 7;
  string updated_at = 8;
}

message CreateGroupRequest {
  string creator_id = 1;
  string group_name = 2;
  repeated string member_ids = 3;
}

message GroupUserRequest {
  string group_id = 1;
  string user_id = 2;
  string admin_id = 3; // ID de l'administrateur qui effectue l'action
}

message GroupRequest {
  string group_id = 1;
}

message GroupMember {
  string user_id = 1;
  string user_name = 2;
  string user_role = 3;
  string joined_at = 4;
}

message GroupMembersResponse {
  repeated GroupMember members = 1;
}

message GroupResponse {
  string id = 1;
  string name = 2;
  string creator_id = 3;
  int32 member_count = 4;
  string created_at = 5;
  string updated_at = 6;
}

message GroupsResponse {
  repeated GroupResponse groups = 1;
}

message MessageResponse {
  Message message = 1;
}

message MessagesResponse {
  repeated Message messages = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 limit = 4;
}

message ConversationsResponse {
  repeated Conversation conversations = 1;
}

message AIRequest {
  string user_id = 1;
  string query = 2;
  string conversation_id = 3;
}

message AIResponse {
  string response = 1;
  repeated Property suggested_properties = 2;
}

message Property {
  string id = 1;
  string title = 2;
  float price = 3;
  string location = 4;
  string property_type = 5;
  string image_url = 6;
}// Ajouter ces nouvelles définitions à chat.proto


message UserStatusRequest {
  string user_id = 1;
  string status = 2;
  string device_info = 3;
}

message UserStatusResponse {
  string user_id = 1;
  string status = 2;
  string last_active = 3;
}

message EmptyRequest {}

message OnlineUsersResponse {
  repeated UserStatusResponse users = 1;
}
// Ajouter ces nouvelles définitions à chat.proto



message TypingStatusRequest {
  string user_id = 1;
  string conversation_id = 2;
  bool is_typing = 3;
}

message TypingStatusResponse {
  bool success = 1;
}

message ConversationRequest {
  string conversation_id = 1;
}

message TypingUsersResponse {
  repeated string typing_user_ids = 1;
}
message AdminNotificationRequest {
  string admin_id = 1;
  string user_id = 2;
  string content = 3;
  string notification_type = 4; // par exemple: "INFO", "WARNING", "UPDATE", etc.
  map<string, string> metadata = 5; // Données supplémentaires facultatives
}

message AdminNotificationResponse {
  string notification_id = 1;
  string status = 2;
  string timestamp = 3;
}